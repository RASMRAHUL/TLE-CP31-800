1.    A. Halloumi Boxes :

// if k == 1 then we cannot reverse the array and so we can't arrange in non-decreasing order.
// so we must have to k >= 2 or the array already sorted itself in the non-decreasing order.

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

int main(){
    int t;
    cin>>t;
    while(t--){
        int n, k;
        cin>>n>>k;
        vector<int> arr(n,0);
        for(int i = 0 ;i< n ;i++){
            cin>>arr[i];
        }
        
        if(k == 1 && !is_sorted(arr.begin(), arr.end()))
            cout<<"No"<<endl;
        else
            cout<<"Yes"<<endl;
    }
    
    return 0;
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
2.    A. Line Trip : 
    // create a max variable and then calculate the difference between starting point and first station 
    // store the max differences till last station and again from last station 
    // also calculate the differences between last station to destination and  for both the side because there is no station at destination

#include <iostream>
#include<vector>
using namespace std;

int main() {
  int t;
  cin>>t;
  while(t--){
      int n, x;
      cin>>n>>x;
      vector<int> arr(n,0);
      for(int i = 0 ;i< n ;i++){
          cin>>arr[i];
      }
      
      int maxi = arr[0]-0;
      
      for(int i = 1 ; i< n ; i++){
            maxi = max(arr[i]-arr[i-1] , maxi);
      }
      
      maxi = max(2*(x-arr[n-1]), maxi);
        
    cout<<maxi<<endl;
  }

    return 0;
}


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

3.   A. Cover in Water : 

// count all the dots in the string 
// if there are continuosly 3 dots present the  print 2.
// else print the number of dots present in the string

#include <iostream>
#include <vector>
#include <algorithm> // max_element
#include <numeric> // Accumulate
using namespace std;

int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        int n;
        cin>>n;
        string s;
        cin>>s;

        int countDot = 0;
        bool printed = false;
        for(int i = 0 ;i< n ;i++){
            if(s[i] == '.')
                countDot++;
            if(i>0 && i < n-1)
            {
                if(s[i-1] == '.' && s[i] == '.' && s[i+1] == '.')
                {
                    printed = true;
                    cout<<2<<endl;
                    break;
                }
            }
        }

        if(!printed)
        {
            cout<<countDot<<endl;
        }
        
    }
    return 0;
}


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
4. A. Game with Integers

// first add 1 or sub 1 in the n value and then check the modulus of 3  == 0 then mark true vanyaWin and break the loop
// else increase the n by 1 to represent the play chance of vanya and then try to avoid the modulus of 3 after increasing 
// the value by 2 which represents the play chance of vanya and vova.

#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

void solve(){
    int n;
    cin>>n;
    int c= 10;
    bool vanyaWin = false;
    while(c-- > 0)
    {
        if((n+1) %3 == 0 || (n-1)%3 == 0)
        {
            vanyaWin = true;
            break;
        }
        else
        {
            n++;
            if((n+2)%3 != 0)
            {
                n++;
            }
            else if((n-2)%3 != 0)
            {
                n--;
            }
        }
    }
    if(vanyaWin)
        cout<<"First"<<endl;
    else
        cout<<"Second"<<endl;
    
}

int main()
{
    int t;
    cin >> t;
    while (t--)
        solve();
    return 0;
}


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

5. A. Jagged Swaps

// only the observations trick here
// if arr[0] != 1 then always "NO" bcs the first position is static.
// else always true.

#include <iostream>
#include <unordered_map>
#include <vector>
#include<algorithm>
 
using namespace std;
 
void solve(){
    int n;
    cin>>n;
    vector<int> arr(n);
    for(int i = 0 ; i< n ;i++){
        cin>>arr[i];
    }
    if(arr[0] != 1)
      cout<<"NO"<<endl;
    else
       cout<<"YES"<<endl;
}
 
int main()
{
    int t;
    cin >> t;
    while (t--)
        solve();
    return 0;
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>..

6. A. Doremy's Paint 3

// first observation => all element should be same
// there are two elements only in unordered_map => first element count of map should not be n/2 and (n+1)/ 2;
// otherwise always false.


// Online C++ compiler to run C++ program online
#include <iostream>
#include<unordered_map>
using namespace std;

int main() {
  int t;
  cin>>t;
  while(t--){
      unordered_map<int, int> m;
      int n ;
      cin>>n;
      
      for(int i = 0 ;i< n ;i++)
      {
          int a;
          cin>>a;
          m[a]++;
      }
      bool flag = true;
      if(m.size() == 1)   // all elements are same
        flag = true;
        else if(m.size() == 2){
           int f1 = begin(m)->second;
           if(f1 != n/2 && f1 != (n+1)/2)   //this follows second canditions
            flag = false;
        }
        else
            flag = false;          // this is for last conditions
        if(flag )
            cout<<"Yes"<<endl;
        else
            cout<<"No"<<endl;
  }
    return 0;
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

7. 
